import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from dotenv import load_dotenv
from pc_parser import PCParser
from components_parser import ComponentsParser
import json
import pandas as pd
import logging
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
user_states = {}
parsers = {
    'pc': None,
    'components': None
}
last_update = None
UPDATE_INTERVAL = timedelta(hours=1)

def get_parser(parser_type):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ –Ω—É–∂–Ω–æ–≥–æ —Ç–∏–ø–∞"""
    global parsers, last_update
    
    current_time = datetime.now()
    
    # –ï—Å–ª–∏ –ø–∞—Ä—Å–µ—Ä –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
    if (parsers[parser_type] is None or 
        last_update is None or 
        current_time - last_update > UPDATE_INTERVAL):
        
        try:
            if parser_type == 'pc':
                parsers[parser_type] = PCParser()
                parsers[parser_type].update_data()
            elif parser_type == 'components':
                parsers[parser_type] = ComponentsParser()
                parsers[parser_type].update_data()
            
            last_update = current_time
            logger.info(f"–ü–∞—Ä—Å–µ—Ä {parser_type} —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞ {parser_type}: {str(e)}")
            return None
    
    return parsers[parser_type]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [
            InlineKeyboardButton("–°–±–æ—Ä–∫–∞ –ü–ö", callback_data="build_pc"),
            InlineKeyboardButton("–ù–æ—É—Ç–±—É–∫", callback_data="build_laptop")
        ],
        [
            InlineKeyboardButton("–ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ", callback_data="components")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–±–æ—Ä–∫–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞. –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:",
        reply_markup=reply_markup
    )

async def show_purpose(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"""
    keyboard = [
        [
            InlineKeyboardButton("–î–ª—è —Ä–∞–±–æ—Ç—ã", callback_data="purpose_work"),
            InlineKeyboardButton("–î–ª—è –∏–≥—Ä", callback_data="purpose_gaming")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞:",
        reply_markup=reply_markup
    )

async def show_component_categories(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö"""
    keyboard = [
        [
            InlineKeyboardButton("–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã", callback_data="comp_cpu"),
            InlineKeyboardButton("–í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã", callback_data="comp_gpu")
        ],
        [
            InlineKeyboardButton("–ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∏–µ –ø–ª–∞—Ç—ã", callback_data="comp_motherboard"),
            InlineKeyboardButton("–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å", callback_data="comp_ram")
        ],
        [
            InlineKeyboardButton("–ù–∞–∫–æ–ø–∏—Ç–µ–ª–∏", callback_data="comp_storage")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö:",
        reply_markup=reply_markup
    )

async def handle_budget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –±—é–¥–∂–µ—Ç–∞"""
    user_id = update.effective_user.id
    try:
        budget = int(update.message.text)
        if budget <= 0:
            await update.message.reply_text("–ë—é–¥–∂–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        state = user_states.get(user_id, {})
        if state.get('action') in ['build_pc', 'build_laptop']:
            await update.message.reply_text("–°–æ–±–∏—Ä–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–±–æ—Ä–∫–∞—Ö –ü–ö...")
            
            parser = get_parser('pc')
            if parser is None:
                await update.message.reply_text(
                    "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
                return
            
            try:
                build = parser.get_random_build(
                    budget=budget,
                    purpose=state.get('purpose', 'work'),
                    type=state.get('action', 'pc')
                )
                
                if build:
                    message = f"–í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª –¥–ª—è –≤–∞—Å:\n\n"
                    message += f"üíª –¢–∏–ø: {'–ù–æ—É—Ç–±—É–∫' if state.get('action') == 'build_laptop' else '–ü–ö'}\n"
                    message += f"üéØ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {'–ò–≥—Ä–æ–≤–æ–π' if state.get('purpose') == 'gaming' else '–†–∞–±–æ—á–∏–π'}\n"
                    message += f"üí∞ –ë—é–¥–∂–µ—Ç: {budget} —Ä—É–±.\n\n"
                    message += f"üìã –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è:\n{build['title']}\n\n"
                    message += f"üíµ –¶–µ–Ω–∞: {build['price']} —Ä—É–±.\n"
                    message += f"üè™ –ú–∞–≥–∞–∑–∏–Ω: {build['source']}\n"
                    message += f"üîó –°—Å—ã–ª–∫–∞: {build['url']}"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥—Ä—É–≥–æ–π —Å–±–æ—Ä–∫–∏
                    keyboard = [[InlineKeyboardButton("–ù–∞–π—Ç–∏ –¥—Ä—É–≥—É—é —Å–±–æ—Ä–∫—É", callback_data=state.get('action'))]]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    await update.message.reply_text(message, reply_markup=reply_markup)
                else:
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞
                    keyboard = [[InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞", callback_data="start")]]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    await update.message.reply_text(
                        "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é —Å–±–æ—Ä–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –±—é–¥–∂–µ—Ç –∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.",
                        reply_markup=reply_markup
                    )
                
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
                user_states[user_id] = {}
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–±–æ—Ä–∫–∏: {str(e)}")
                await update.message.reply_text(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–±–æ—Ä–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
        elif state.get('action') == 'components':
            category = state.get('category')
            if not category:
                await update.message.reply_text("–ù–µ –≤—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start")
                return
                
            parser = get_parser('components')
            if parser is None:
                await update.message.reply_text(
                    "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
                return
            
            try:
                await update.message.reply_text("–°–æ–±–∏—Ä–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö...")
                component = parser.get_component_by_budget(category, budget)
                
                if component:
                    message = f"–í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª –¥–ª—è –≤–∞—Å:\n\n"
                    message += f"üì¶ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
                    message += f"üí∞ –ë—é–¥–∂–µ—Ç: {budget} —Ä—É–±.\n\n"
                    message += f"üìã –ù–∞–∑–≤–∞–Ω–∏–µ: {component['title']}\n"
                    message += f"üíµ –¶–µ–Ω–∞: {component['price']} —Ä—É–±.\n"
                    message += f"üè™ –ú–∞–≥–∞–∑–∏–Ω: {component['source']}\n"
                    message += f"üîó –°—Å—ã–ª–∫–∞: {component['url']}"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥—Ä—É–≥–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–µ–≥–æ
                    keyboard = [[InlineKeyboardButton("–ù–∞–π—Ç–∏ –¥—Ä—É–≥–æ–µ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–µ–µ", callback_data="components")]]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    await update.message.reply_text(message, reply_markup=reply_markup)
                else:
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞
                    keyboard = [[InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞", callback_data="start")]]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    await update.message.reply_text(
                        "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–µ–µ. "
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å –±—é–¥–∂–µ—Ç –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é.",
                        reply_markup=reply_markup
                    )
                
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
                user_states[user_id] = {}
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–µ–≥–æ: {str(e)}")
                await update.message.reply_text(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–µ–≥–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
        else:
            await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start")
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –±—é–¥–∂–µ—Ç–∞:")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±—é–¥–∂–µ—Ç–∞: {str(e)}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start"
        )

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤"""
    query = update.callback_query
    user_id = query.from_user.id
    
    try:
        if query.data in ['build_pc', 'build_laptop']:
            user_states[user_id] = {'action': query.data}
            await show_purpose(update, context)
        elif query.data in ['purpose_work', 'purpose_gaming']:
            if user_id in user_states:
                user_states[user_id]['purpose'] = 'work' if query.data == 'purpose_work' else 'gaming'
                await query.message.reply_text(
                    "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –±—é–¥–∂–µ—Ç –≤ —Ä—É–±–ª—è—Ö:"
                )
        elif query.data == 'components':
            user_states[user_id] = {'action': 'components'}
            await show_component_categories(update, context)
        elif query.data.startswith('comp_'):
            if user_id in user_states:
                user_states[user_id]['category'] = query.data.replace('comp_', '')
                await query.message.reply_text(
                    "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –±—é–¥–∂–µ—Ç –≤ —Ä—É–±–ª—è—Ö:"
                )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {str(e)}")
        await query.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start"
        )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = update.message.text
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –≤–≤–æ–¥ –±—é–¥–∂–µ—Ç–∞
    if user_id in user_states and 'action' in user_states[user_id]:
        await handle_budget(update, context)
        return
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ URL –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ DNS
    if 'dns-shop.ru/user-pc/configuration/' in text:
        await analyze_configuration(update, context, text)
        return
        
    # –ï—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–º–æ—â—å
    await start(update, context)

async def analyze_configuration(update: Update, context: ContextTypes.DEFAULT_TYPE, url: str):
    """–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ DNS"""
    try:
        await update.message.reply_text("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")
        
        parser = get_parser('pc')
        if parser is None:
            await update.message.reply_text(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return
            
        build = parser.get_build_by_url(url)
        
        if build:
            message = "üìã –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:\n\n"
            message += f"üñ• –ù–∞–∑–≤–∞–Ω–∏–µ: {build['title']}\n"
            message += f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {build['total_price']} —Ä—É–±.\n\n"
            message += "üîß –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:\n"
            
            for component in build['components']:
                message += f"‚Ä¢ {component['title']} - {component['price']} —Ä—É–±.\n"
            
            message += f"\nüîó –°—Å—ã–ª–∫–∞: {build['url']}"
            
            await update.message.reply_text(message)
        else:
            await update.message.reply_text(
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. "
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CallbackQueryHandler(handle_callback))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        application.run_polling()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {str(e)}")

if __name__ == "__main__":
    main()








