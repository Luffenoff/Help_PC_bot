import logging
import os
from dotenv import load_dotenv
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, CallbackQuery
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ConversationHandler
from database import (
    get_db_connection, update_user_last_active, get_device_types,
    get_price_categories, get_component_categories, get_build_details,
    get_builds_by_type_and_price, get_components_by_category, get_component_details,
    get_random_build, add_suggestion, get_user_suggestions
)
import json


load_dotenv()


(
    START,
    SELECTING_MAIN_MENU,
    SELECTING_DEVICE_TYPE,
    SELECTING_PRICE_CATEGORY,
    SELECTING_COMPONENT_CATEGORY,
    VIEWING_BUILDS,
    VIEWING_BUILD_DETAILS,
    VIEWING_COMPONENTS,
    VIEWING_COMPONENT_DETAILS,
) = range(9)


user_states = {}


logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)


TOKEN = os.environ.get("BOT_TOKEN")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    conn = get_db_connection()
    cursor = conn.cursor()
    existing_user = cursor.execute(
        "SELECT * FROM users WHERE user_id = ?", 
        (user.id,)
    ).fetchone()
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    if not existing_user:
        cursor.execute(
            """
            INSERT INTO users (user_id, username, first_name, last_name, registration_date, last_active)
            VALUES (?, ?, ?, ?, ?, ?)
            """,
            (user.id, user.username, user.first_name, user.last_name, current_time, current_time)
        )
    else:
        update_user_last_active(user.id)
    conn.commit()
    conn.close()
    user_states[user.id] = {}
    inline_keyboard = [
        [
            InlineKeyboardButton("üñ•Ô∏è –°–æ–±—Ä–∞—Ç—å –ü–ö", callback_data="build_pc"),
            InlineKeyboardButton("üîß –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã", callback_data="components")
        ],
        [
            InlineKeyboardButton("üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", callback_data="suggestions"),
            InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")
        ]
    ]
    inline_reply_markup = InlineKeyboardMarkup(inline_keyboard)
    reply_keyboard = [[KeyboardButton("–°—Ç–∞—Ä—Ç")]]
    reply_markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
        "–Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Å–±–æ—Ä–∫–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤. –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ –≤—ã–±—Ä–∞—Ç—å –≥–æ—Ç–æ–≤—É—é —Å–±–æ—Ä–∫—É –ü–ö –∏–ª–∏ –ø–æ–¥–æ–±—Ä–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã.\n\n"
        "–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=inline_reply_markup
    )
    return SELECTING_MAIN_MENU


async def handle_start_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è '–°—Ç–∞—Ä—Ç'"""
    if update.message.text.lower() == "—Å—Ç–∞—Ä—Ç":
        return await start(update, context)
    return None


async def build_pc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–±–æ—Ä–∫–∏ –ü–ö"""
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    update_user_last_active(user_id)
    device_types = get_device_types()
    keyboard = []
    for device_type in device_types:
        keyboard.append([
            InlineKeyboardButton(
                device_type["name"], 
                callback_data=f"device_type_{device_type['id']}"
            )
        ])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:",
        reply_markup=reply_markup
    )
    return SELECTING_DEVICE_TYPE


async def select_price_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ü–µ–Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    update_user_last_active(user_id)
    device_type_id = int(query.data.split("_")[-1])
    user_states[user_id] = {"device_type_id": device_type_id}
    price_categories = get_price_categories()
    keyboard = []
    for price_category in price_categories:
        min_price = "{:,}".format(price_category["min_price"]).replace(",", " ")
        max_price = "{:,}".format(price_category["max_price"]).replace(",", " ")
        if price_category["id"] == 3:
            price_text = f"{price_category['name']} (–æ—Ç {min_price} ‚ÇΩ)"
        else:
            price_text = f"{price_category['name']} ({min_price} - {max_price} ‚ÇΩ)"
        keyboard.append([
            InlineKeyboardButton(
                price_text, 
                callback_data=f"price_category_{price_category['id']}"
            )
        ])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_device")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=reply_markup
    )
    return SELECTING_PRICE_CATEGORY


async def show_builds(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–±–æ—Ä–æ–∫"""
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    update_user_last_active(user_id)
    price_category_id = int(query.data.split("_")[-1])
    user_states[user_id]["price_category_id"] = price_category_id
    device_type_id = user_states[user_id]["device_type_id"]
    builds = get_builds_by_type_and_price(device_type_id, price_category_id)
    if not builds:
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_price")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–±–æ—Ä–æ–∫ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=reply_markup
        )
    else:
        keyboard = []
        for build in builds:
            keyboard.append([
                InlineKeyboardButton(
                    f"{build['name']} - {build['total_price']} —Ä—É–±.", 
                    callback_data=f"build_{build['id']}"
                )
            ])
        keyboard.append([
            InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω–∞—è —Å–±–æ—Ä–∫–∞", callback_data=f"random_build_{price_category_id}")
        ])
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_price")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–±–æ—Ä–∫–∏:",
            reply_markup=reply_markup
        )
    return VIEWING_BUILDS


async def show_build_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Å–±–æ—Ä–∫–∏"""
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    update_user_last_active(user_id)
    build_id = int(query.data.split("_")[-1])
    build_details = get_build_details(build_id)
    if not build_details:
        await show_builds(update, context)
        return VIEWING_BUILDS
    build = build_details["build"]
    components = build_details["components"]
    message_text = f"*{build['name']}*\n\n"
    message_text += f"{build['description']}\n\n"
    message_text += f"*–¶–µ–Ω–∞:* {build['total_price']} —Ä—É–±.\n\n"
    if build.get('link'):
        message_text += f"[–û—Ç–∫—Ä—ã—Ç—å —Å–±–æ—Ä–∫—É –≤ –º–∞–≥–∞–∑–∏–Ω–µ]({build['link']})\n\n"
    message_text += "*–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:*\n"
    for component in components:
        message_text += f"- {component['name']} - {component['price']} —Ä—É–±.\n"
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_builds")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if build["image_url"]:
        await query.message.reply_photo(
            photo=build["image_url"],
            caption=message_text,
            parse_mode="Markdown",
            reply_markup=reply_markup
        )
        await query.message.delete()
    else:
        await query.edit_message_text(
            text=message_text,
            parse_mode="Markdown",
            reply_markup=reply_markup
        )
    return VIEWING_BUILD_DETAILS


async def components_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    update_user_last_active(user_id)
    component_categories = get_component_categories()
    keyboard = []
    for category in component_categories:
        keyboard.append([
            InlineKeyboardButton(
                category["name"], 
                callback_data=f"component_category_{category['id']}"
            )
        ])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:",
        reply_markup=reply_markup
    )
    return SELECTING_COMPONENT_CATEGORY


async def show_components(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    update_user_last_active(user_id)
    category_id = int(query.data.split("_")[-1])
    user_states[user_id]["component_category_id"] = category_id
    components = get_components_by_category(category_id)
    if not components:
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_categories")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=reply_markup
        )
    else:
        keyboard = []
        for component in components:
            keyboard.append([
                InlineKeyboardButton(
                    f"{component['name']} - {component['price']} —Ä—É–±.", 
                    callback_data=f"component_{component['id']}"
                )
            ])
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_categories")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:",
            reply_markup=reply_markup
        )    
    return VIEWING_COMPONENTS


async def show_component_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    update_user_last_active(user_id)
    component_id = int(query.data.split("_")[-1])
    component = get_component_details(component_id)
    if not component:
        await show_components(update, context)
        return VIEWING_COMPONENTS
    message_text = f"*{component['name']}*\n\n"
    message_text += f"{component['description']}\n\n"
    message_text += f"*–¶–µ–Ω–∞:* {component['price']} —Ä—É–±.\n\n"
    if component["specs"]:
        message_text += f"*–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:*\n{component['specs']}\n"
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_components")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if component["image_url"]:
        await query.message.reply_photo(
            photo=component["image_url"],
            caption=message_text,
            parse_mode="Markdown",
            reply_markup=reply_markup
        )
        await query.message.delete()
    else:
        await query.edit_message_text(
            text=message_text,
            parse_mode="Markdown",
            reply_markup=reply_markup
        )
    return VIEWING_COMPONENT_DETAILS


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –ü–æ–º–æ—â—å"""
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üîç *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –≤—ã–±—Ä–∞—Ç—å –≥–æ—Ç–æ–≤—É—é —Å–±–æ—Ä–∫—É –ü–ö –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã.\n\n"
            "*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
            "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
            "*–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*\n"
            "1. –í –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –≤—ã–±–µ—Ä–∏—Ç–µ '–°–æ–±—Ä–∞—Ç—å –ü–ö' –∏–ª–∏ '–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã'\n"
            "2. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –Ω–∞ —ç–∫—Ä–∞–Ω–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω—É–∂–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\n"
            "3. –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–±–æ—Ä–∫–∏ –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã\n\n"
            "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            parse_mode="Markdown",
            reply_markup=reply_markup
        )
    else:
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üîç *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –≤—ã–±—Ä–∞—Ç—å –≥–æ—Ç–æ–≤—É—é —Å–±–æ—Ä–∫—É –ü–ö –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã.\n\n"
            "*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
            "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
            "/suggest - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –±–æ—Ç–∞\n"
            "/my_suggestions - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\n\n"
            "*–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*\n"
            "1. –í –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –≤—ã–±–µ—Ä–∏—Ç–µ '–°–æ–±—Ä–∞—Ç—å –ü–ö' –∏–ª–∏ '–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã'\n"
            "2. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –Ω–∞ —ç–∫—Ä–∞–Ω–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω—É–∂–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\n"
            "3. –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–±–æ—Ä–∫–∏ –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã\n\n"
            "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            parse_mode="Markdown",
            reply_markup=reply_markup
        )


async def handle_suggestion(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = update.message.text
    if not text.startswith('/suggest'):
        return
    suggestion_text = text.replace('/suggest', '').strip()
    if not suggestion_text:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /suggest.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: /suggest –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Å–±–æ—Ä–∫–∏ –¥–ª—è –∏–≥—Ä"
        )
        return
    suggestion_id = add_suggestion(user.id, suggestion_text)
    await update.message.reply_text(
        f"–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å ID: {suggestion_id}\n"
    )


async def show_my_suggestions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    suggestions = get_user_suggestions(user.id)
    if not suggestions:
        await update.message.reply_text(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π."
        )
        return
    message = "–í–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:\n"
    for suggestion in suggestions:
        status = {
            'new': '–ù–æ–≤–æ–µ',
            'in_progress': '–í –ø—Ä–æ—Ü–µ—Å—Å–µ',
            'completed': '–í—ã–ø–æ–ª–Ω–µ–Ω–æ',
            'rejected': '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ'
        }.get(suggestion['status'], suggestion['status'])
        message += f"ID: {suggestion['id']}\n"
        message += f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: {suggestion['suggestion_text']}\n"
        message += f"–°—Ç–∞—Ç—É—Å: {status}\n"
        message += f"–î–∞—Ç–∞: {suggestion['created_at']}\n\n"
    await update.message.reply_text(message)


async def suggestions_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"""
    query = update.callback_query
    await query.answer()
    user = update.effective_user
    
    keyboard = [
        [InlineKeyboardButton("üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", callback_data="new_suggestion")],
        [InlineKeyboardButton("üìã –ú–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", callback_data="my_suggestions")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üí° *–ú–µ–Ω—é –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π*\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="Markdown",
        reply_markup=reply_markup
    )


async def new_suggestion_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="suggestions")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üìù *–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è*\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /suggest –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "/suggest –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Å–±–æ—Ä–∫–∏ –¥–ª—è –∏–≥—Ä\n"
        "/suggest –£–ª—É—á—à–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±–æ—Ç–∞\n\n"
        "–í–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–º–æ–≥—É—Ç —Å–¥–µ–ª–∞—Ç—å –±–æ—Ç–∞ –ª—É—á—à–µ!",
        parse_mode="Markdown",
        reply_markup=reply_markup
    )


async def show_my_suggestions_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è'"""
    query = update.callback_query
    await query.answer()
    user = update.effective_user
    
    suggestions = get_user_suggestions(user.id)
    if not suggestions:
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="suggestions")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.\n\n"
            "–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /suggest",
            reply_markup=reply_markup
        )
        return
    
    message = "üìã *–í–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:*\n\n"
    for suggestion in suggestions:
        status = {
            'new': 'üÜï –ù–æ–≤–æ–µ',
            'in_progress': '‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ',
            'completed': '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ',
            'rejected': '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ'
        }.get(suggestion['status'], suggestion['status'])
        
        message += f"*ID:* {suggestion['id']}\n"
        message += f"*–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:* {suggestion['suggestion_text']}\n"
        message += f"*–°—Ç–∞—Ç—É—Å:* {status}\n"
        message += f"*–î–∞—Ç–∞:* {suggestion['created_at']}\n\n"
    
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="suggestions")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        message,
        parse_mode="Markdown",
        reply_markup=reply_markup
    )


async def back_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞"""
    query = update.callback_query
    await query.answer()
    action = query.data
    user_id = update.effective_user.id
    if action == "back_to_main":
        keyboard = [
            [
                InlineKeyboardButton("üñ•Ô∏è –°–æ–±—Ä–∞—Ç—å –ü–ö", callback_data="build_pc"),
                InlineKeyboardButton("üîß –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã", callback_data="components")
            ],
            [
                InlineKeyboardButton("üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", callback_data="suggestions"),
                InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
            reply_markup=reply_markup
        )
        return SELECTING_MAIN_MENU
    elif action == "suggestions":
        return await suggestions_menu(update, context)
    elif action == "back_to_device":
        return await build_pc(update, context)
    elif action == "back_to_price":
        if user_id in user_states and "device_type_id" in user_states[user_id]:
            device_type_id = user_states[user_id]["device_type_id"]
            device_types = get_device_types()
            price_categories = get_price_categories()
            keyboard = []
            for price_category in price_categories:
                min_price = "{:,}".format(price_category["min_price"]).replace(",", " ")
                max_price = "{:,}".format(price_category["max_price"]).replace(",", " ")
                if price_category["id"] == 3:
                    price_text = f"{price_category['name']} (–æ—Ç {min_price} ‚ÇΩ)"
                else:
                    price_text = f"{price_category['name']} ({min_price} - {max_price} ‚ÇΩ)"
                keyboard.append([
                    InlineKeyboardButton(
                        price_text, 
                        callback_data=f"price_category_{price_category['id']}"
                    )
                ])
            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_device")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                reply_markup=reply_markup
            )
            return SELECTING_PRICE_CATEGORY
        else:
            return await build_pc(update, context)
    elif action == "back_to_builds":
        if user_id in user_states and "device_type_id" in user_states[user_id] and "price_category_id" in user_states[user_id]:
            device_type_id = user_states[user_id]["device_type_id"]
            price_category_id = user_states[user_id]["price_category_id"]
            builds = get_builds_by_type_and_price(device_type_id, price_category_id)
            keyboard = []
            for build in builds:
                keyboard.append([
                    InlineKeyboardButton(
                        f"{build['name']} - {build['total_price']} —Ä—É–±.", 
                        callback_data=f"build_{build['id']}"
                    )
                ])
            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_price")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–±–æ—Ä–∫–∏:",
                reply_markup=reply_markup
            )
            return VIEWING_BUILDS
        else:
            return await build_pc(update, context)
    elif action == "back_to_categories":
        return await components_menu(update, context)
    elif action == "back_to_components":
        if user_id in user_states and "component_category_id" in user_states[user_id]:
            category_id = user_states[user_id]["component_category_id"]
            components = get_components_by_category(category_id)
            keyboard = []
            for component in components:
                keyboard.append([
                    InlineKeyboardButton(
                        f"{component['name']} - {component['price']} —Ä—É–±.", 
                        callback_data=f"component_{component['id']}"
                    )
                ])
            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_categories")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:",
                reply_markup=reply_markup
            )
            return VIEWING_COMPONENTS
        else:
            return await components_menu(update, context)


async def show_random_build(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–π —Å–±–æ—Ä–∫–∏"""
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    update_user_last_active(user_id)
    price_category_id = int(query.data.split("_")[-1])
    device_type_id = user_states[user_id]["device_type_id"]
    build_details = get_random_build(device_type_id, price_category_id)
    if not build_details:
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_price")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–±–æ—Ä–æ–∫ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=reply_markup
        )
    else:
        message_text = f"*{build_details['name']}*\n\n"
        message_text += f"{build_details['description']}\n\n"
        message_text += f"*–¶–µ–Ω–∞:* {build_details['total_price']} —Ä—É–±.\n\n"
        message_text += "*–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:*\n"
        for component in build_details['components']:
            message_text += f"- {component['name']} - {component['price']} —Ä—É–±.\n"
        keyboard = [
            [InlineKeyboardButton("üîÑ –°–ª–µ–¥—É—é—â–∞—è —Å–ª—É—á–∞–π–Ω–∞—è", callback_data=f"random_build_{price_category_id}")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É —Å–±–æ—Ä–æ–∫", callback_data="back_to_builds")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            text=message_text,
            parse_mode="Markdown",
            reply_markup=reply_markup
        )
    return VIEWING_BUILD_DETAILS


async def next_build(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–ª–µ–¥—É—é—â–∞—è —Å–±–æ—Ä–∫–∞'"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    update_user_last_active(user_id)
    price_category_id = int(query.data.split("_")[-1])
    device_type_id = user_states[user_id]["device_type_id"]
    build_details = get_random_build(device_type_id, price_category_id)
    if not build_details:
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_price")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–±–æ—Ä–æ–∫ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=reply_markup
        )
    else:
        build = build_details["build"]
        components = build_details["components"]
        message_text = f"*{build['name']}*\n\n"
        message_text += f"{build['description']}\n\n"
        message_text += f"*–¶–µ–Ω–∞:* {build['total_price']} —Ä—É–±.\n\n"
        message_text += "*–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:*\n"
        for component in components:
            message_text += f"- {component['name']} - {component['price']} —Ä—É–±.\n"
        keyboard = [
            [InlineKeyboardButton("üîÑ –°–ª–µ–¥—É—é—â–∞—è —Å–±–æ—Ä–∫–∞", callback_data=f"next_build_{price_category_id}")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_price")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        if build["image_url"]:
            await query.message.reply_photo(
                photo=build["image_url"],
                caption=message_text,
                parse_mode="Markdown",
                reply_markup=reply_markup
            )
            await query.message.delete()
        else:
            await query.edit_message_text(
                text=message_text,
                parse_mode="Markdown",
                reply_markup=reply_markup
            )
    return VIEWING_BUILDS


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = ApplicationBuilder().token(TOKEN).build()
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("suggest", handle_suggestion))
    application.add_handler(CommandHandler("my_suggestions", show_my_suggestions))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_start_text))
    application.add_handler(CallbackQueryHandler(build_pc, pattern="^build_pc$"))
    application.add_handler(CallbackQueryHandler(components_menu, pattern="^components$"))
    application.add_handler(CallbackQueryHandler(help_command, pattern="^help$"))
    application.add_handler(CallbackQueryHandler(suggestions_menu, pattern="^suggestions$"))
    application.add_handler(CallbackQueryHandler(new_suggestion_menu, pattern="^new_suggestion$"))
    application.add_handler(CallbackQueryHandler(show_my_suggestions_menu, pattern="^my_suggestions$"))
    application.add_handler(CallbackQueryHandler(back_handler, pattern="^back_to"))
    application.add_handler(CallbackQueryHandler(select_price_category, pattern="^device_type_"))
    application.add_handler(CallbackQueryHandler(show_builds, pattern="^price_category_"))
    application.add_handler(CallbackQueryHandler(show_build_details, pattern="^build_"))
    application.add_handler(CallbackQueryHandler(show_random_build, pattern="^random_build_"))
    application.add_handler(CallbackQueryHandler(show_components, pattern="^component_category_"))
    application.add_handler(CallbackQueryHandler(show_component_details, pattern="^component_"))
    application.add_handler(CallbackQueryHandler(next_build, pattern="^next_build_"))
    application.run_polling()

    
if __name__ == "__main__":
    main()