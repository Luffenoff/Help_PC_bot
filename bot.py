import logging
import os
from dotenv import load_dotenv
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, CallbackQuery
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ConversationHandler
from database import get_db_connection, update_user_last_active, get_device_types, get_price_categories, get_component_categories
from database import get_builds_by_type_and_price, get_build_details, get_components_by_category, get_component_details
import json

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(
    START,
    SELECTING_MAIN_MENU,
    SELECTING_DEVICE_TYPE,
    SELECTING_PRICE_CATEGORY,
    SELECTING_COMPONENT_CATEGORY,
    VIEWING_BUILDS,
    VIEWING_BUILD_DETAILS,
    VIEWING_COMPONENTS,
    VIEWING_COMPONENT_DETAILS,
) = range(9)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.environ.get("BOT_TOKEN")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    conn = get_db_connection()
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    existing_user = cursor.execute(
        "SELECT * FROM users WHERE user_id = ?", 
        (user.id,)
    ).fetchone()
    
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    if not existing_user:
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute(
            """
            INSERT INTO users (user_id, username, first_name, last_name, registration_date, last_active)
            VALUES (?, ?, ?, ?, ?, ?)
            """,
            (user.id, user.username, user.first_name, user.last_name, current_time, current_time)
        )
    else:
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        update_user_last_active(user.id)
    
    conn.commit()
    conn.close()
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_states[user.id] = {}
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = [
        [
            InlineKeyboardButton("üñ•Ô∏è –°–æ–±—Ä–∞—Ç—å –ü–ö", callback_data="build_pc"),
            InlineKeyboardButton("üîß –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã", callback_data="components")
        ],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
        "–Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Å–±–æ—Ä–∫–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤. –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ –≤—ã–±—Ä–∞—Ç—å –≥–æ—Ç–æ–≤—É—é —Å–±–æ—Ä–∫—É –ü–ö –∏–ª–∏ –ø–æ–¥–æ–±—Ä–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã.\n\n"
        "–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=reply_markup
    )
    
    return SELECTING_MAIN_MENU

async def build_pc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–±–æ—Ä–∫–∏ –ü–ö"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    update_user_last_active(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏–∑ –ë–î
    device_types = get_device_types()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∏–ø–∞–º–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    keyboard = []
    for device_type in device_types:
        keyboard.append([
            InlineKeyboardButton(
                device_type["name"], 
                callback_data=f"device_type_{device_type['id']}"
            )
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:",
        reply_markup=reply_markup
    )
    
    return SELECTING_DEVICE_TYPE

async def select_price_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ü–µ–Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    update_user_last_active(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ç–∏–ø–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑ callback_data
    device_type_id = int(query.data.split("_")[-1])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_states[user_id]["device_type_id"] = device_type_id
    
    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –ë–î
    price_categories = get_price_categories()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ü–µ–Ω–æ–≤—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω
    keyboard = []
    for price_category in price_categories:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—ã —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á
        min_price = "{:,}".format(price_category["min_price"]).replace(",", " ")
        max_price = "{:,}".format(price_category["max_price"]).replace(",", " ")
        
        # –î–ª—è –ø—Ä–µ–º–∏—É–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º "–æ—Ç"
        if price_category["id"] == 3:
            price_text = f"{price_category['name']} (–æ—Ç {min_price} ‚ÇΩ)"
        else:
            price_text = f"{price_category['name']} ({min_price} - {max_price} ‚ÇΩ)"
            
        keyboard.append([
            InlineKeyboardButton(
                price_text, 
                callback_data=f"price_category_{price_category['id']}"
            )
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_device")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=reply_markup
    )
    
    return SELECTING_PRICE_CATEGORY

async def show_builds(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–π —Å–±–æ—Ä–∫–∏ –ø–æ —Ç–∏–ø—É –∏ —Ü–µ–Ω–µ"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    update_user_last_active(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ü–µ–Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ callback_data
    price_category_id = int(query.data.split("_")[-1])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_states[user_id]["price_category_id"] = price_category_id
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–±–æ—Ä–∫–∏ –∏–∑ –ë–î
    device_type_id = user_states[user_id]["device_type_id"]
    builds = get_builds_by_type_and_price(device_type_id, price_category_id)
    
    if not builds:
        # –ï—Å–ª–∏ —Å–±–æ—Ä–æ–∫ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_price")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–±–æ—Ä–æ–∫ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=reply_markup
        )
    else:
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Å–±–æ—Ä–∫—É
        import random
        build = random.choice(builds)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Å–±–æ—Ä–∫–∏
        build_details = get_build_details(build['id'])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"üéÆ {build['name']}\n\n"
        message += f"üí∞ –¶–µ–Ω–∞: {build['total_price']} —Ä—É–±.\n\n"
        message += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {build['description']}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–±–æ—Ä–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if build.get('link'):
            message += f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–±–æ—Ä–∫—É: {build['link']}\n\n"
        
        if build_details and build_details.get('components'):
            message += "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:\n"
            for component in build_details['components']:
                message += f"‚Ä¢ {component.get('name', '')} - {component.get('price', 0)} —Ä—É–±.\n"
                if component.get('specs'):
                    try:
                        specs = json.loads(component['specs'])
                        for spec_name, spec_value in specs.items():
                            message += f"  - {spec_name}: {spec_value}\n"
                    except:
                        pass
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = [
            [
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_price"),
                InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è", callback_data=f"next_build_{price_category_id}")
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            message,
            reply_markup=reply_markup
        )
    
    return VIEWING_BUILDS

async def next_build(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å–±–æ—Ä–∫—É"""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ü–µ–Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ callback_data
    price_category_id = int(query.data.split("_")[-1])
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç Update —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º callback_data
    new_update = Update(
        update.update_id,
        message=update.message,
        edited_message=update.edited_message,
        channel_post=update.channel_post,
        edited_channel_post=update.edited_channel_post,
        inline_query=update.inline_query,
        chosen_inline_result=update.chosen_inline_result,
        callback_query=CallbackQuery(
            id=query.id,
            from_user=query.from_user,
            chat_instance=query.chat_instance,
            message=query.message,
            data=f"price_{price_category_id}"
        ),
        shipping_query=update.shipping_query,
        pre_checkout_query=update.pre_checkout_query,
        poll=update.poll,
        poll_answer=update.poll_answer,
        my_chat_member=update.my_chat_member,
        chat_member=update.chat_member,
        chat_join_request=update.chat_join_request
    )
    
    # –í—ã–∑—ã–≤–∞–µ–º show_builds —Å –Ω–æ–≤—ã–º –æ–±—ä–µ–∫—Ç–æ–º Update
    return await show_builds(new_update, context)

async def show_build_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Å–±–æ—Ä–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    update_user_last_active(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Å–±–æ—Ä–∫–∏ –∏–∑ callback_data
    build_id = int(query.data.split("_")[-1])
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Å–±–æ—Ä–∫–∏ –∏–∑ –ë–î
    build_details = get_build_details(build_id)
    
    if not build_details:
        # –ï—Å–ª–∏ —Å–±–æ—Ä–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É
        await show_builds(update, context)
        return VIEWING_BUILDS
    
    build = build_details["build"]
    components = build_details["components"]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = f"*{build['name']}*\n\n"
    message_text += f"{build['description']}\n\n"
    message_text += f"*–¶–µ–Ω–∞:* {build['total_price']} —Ä—É–±.\n\n"
    message_text += "*–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:*\n"
    
    for component in components:
        message_text += f"- {component['name']} - {component['price']} —Ä—É–±.\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_builds")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
    if build["image_url"]:
        await query.message.reply_photo(
            photo=build["image_url"],
            caption=message_text,
            parse_mode="Markdown",
            reply_markup=reply_markup
        )
        await query.message.delete()
    else:
        await query.edit_message_text(
            text=message_text,
            parse_mode="Markdown",
            reply_markup=reply_markup
        )
    
    return VIEWING_BUILD_DETAILS

async def components_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    update_user_last_active(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏–∑ –ë–î
    component_categories = get_component_categories()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    keyboard = []
    for category in component_categories:
        keyboard.append([
            InlineKeyboardButton(
                category["name"], 
                callback_data=f"component_category_{category['id']}"
            )
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:",
        reply_markup=reply_markup
    )
    
    return SELECTING_COMPONENT_CATEGORY

async def show_components(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    update_user_last_active(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ callback_data
    category_id = int(query.data.split("_")[-1])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_states[user_id]["component_category_id"] = category_id
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–∑ –ë–î
    components = get_components_by_category(category_id)
    
    if not components:
        # –ï—Å–ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_categories")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=reply_markup
        )
    else:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
        keyboard = []
        for component in components:
            keyboard.append([
                InlineKeyboardButton(
                    f"{component['name']} - {component['price']} —Ä—É–±.", 
                    callback_data=f"component_{component['id']}"
                )
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_categories")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:",
            reply_markup=reply_markup
        )
    
    return VIEWING_COMPONENTS

async def show_component_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    update_user_last_active(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º ID –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏–∑ callback_data
    component_id = int(query.data.split("_")[-1])
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏–∑ –ë–î
    component = get_component_details(component_id)
    
    if not component:
        # –ï—Å–ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É
        await show_components(update, context)
        return VIEWING_COMPONENTS
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = f"*{component['name']}*\n\n"
    message_text += f"{component['description']}\n\n"
    message_text += f"*–¶–µ–Ω–∞:* {component['price']} —Ä—É–±.\n\n"
    
    if component["specs"]:
        message_text += f"*–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:*\n{component['specs']}\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_components")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
    if component["image_url"]:
        await query.message.reply_photo(
            photo=component["image_url"],
            caption=message_text,
            parse_mode="Markdown",
            reply_markup=reply_markup
        )
        await query.message.delete()
    else:
        await query.edit_message_text(
            text=message_text,
            parse_mode="Markdown",
            reply_markup=reply_markup
        )
    
    return VIEWING_COMPONENT_DETAILS

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –ü–æ–º–æ—â—å"""
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üîç *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –≤—ã–±—Ä–∞—Ç—å –≥–æ—Ç–æ–≤—É—é —Å–±–æ—Ä–∫—É –ü–ö –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã.\n\n"
            "*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
            "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
            "*–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*\n"
            "1. –í –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –≤—ã–±–µ—Ä–∏—Ç–µ '–°–æ–±—Ä–∞—Ç—å –ü–ö' –∏–ª–∏ '–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã'\n"
            "2. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –Ω–∞ —ç–∫—Ä–∞–Ω–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω—É–∂–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\n"
            "3. –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–±–æ—Ä–∫–∏ –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã\n\n"
            "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            parse_mode="Markdown",
            reply_markup=reply_markup
        )
    else:
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üîç *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –≤—ã–±—Ä–∞—Ç—å –≥–æ—Ç–æ–≤—É—é —Å–±–æ—Ä–∫—É –ü–ö –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã.\n\n"
            "*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
            "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
            "*–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*\n"
            "1. –í –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –≤—ã–±–µ—Ä–∏—Ç–µ '–°–æ–±—Ä–∞—Ç—å –ü–ö' –∏–ª–∏ '–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã'\n"
            "2. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –Ω–∞ —ç–∫—Ä–∞–Ω–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω—É–∂–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\n"
            "3. –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–±–æ—Ä–∫–∏ –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã\n\n"
            "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            parse_mode="Markdown",
            reply_markup=reply_markup
        )

async def back_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    action = query.data
    user_id = update.effective_user.id
    if action == "back_to_main":
        keyboard = [
            [
                InlineKeyboardButton("üñ•Ô∏è –°–æ–±—Ä–∞—Ç—å –ü–ö", callback_data="build_pc"),
                InlineKeyboardButton("üîß –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã", callback_data="components")
            ],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
            reply_markup=reply_markup
        )
        return SELECTING_MAIN_MENU
    elif action == "back_to_device":
        return await build_pc(update, context)
    elif action == "back_to_price":
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ü–µ–Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if user_id in user_states and "device_type_id" in user_states[user_id]:
            device_type_id = user_states[user_id]["device_type_id"]
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏–∑ –ë–î
            device_types = get_device_types()
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ü–µ–Ω–æ–≤—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
            price_categories = get_price_categories()
            keyboard = []
            for price_category in price_categories:
                min_price = "{:,}".format(price_category["min_price"]).replace(",", " ")
                max_price = "{:,}".format(price_category["max_price"]).replace(",", " ")
                
                if price_category["id"] == 3:
                    price_text = f"{price_category['name']} (–æ—Ç {min_price} ‚ÇΩ)"
                else:
                    price_text = f"{price_category['name']} ({min_price} - {max_price} ‚ÇΩ)"
                    
                keyboard.append([
                    InlineKeyboardButton(
                        price_text, 
                        callback_data=f"price_category_{price_category['id']}"
                    )
                ])
            
            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_device")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                reply_markup=reply_markup
            )
            return SELECTING_PRICE_CATEGORY
        else:
            return await build_pc(update, context)
            
    elif action == "back_to_builds":
        # –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —Å–±–æ—Ä–æ–∫
        if user_id in user_states and "device_type_id" in user_states[user_id] and "price_category_id" in user_states[user_id]:
            device_type_id = user_states[user_id]["device_type_id"]
            price_category_id = user_states[user_id]["price_category_id"]
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–±–æ—Ä–∫–∏ –∏–∑ –ë–î
            builds = get_builds_by_type_and_price(device_type_id, price_category_id)
            
            keyboard = []
            for build in builds:
                keyboard.append([
                    InlineKeyboardButton(
                        f"{build['name']} - {build['total_price']} —Ä—É–±.", 
                        callback_data=f"build_{build['id']}"
                    )
                ])
            
            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_price")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–±–æ—Ä–∫–∏:",
                reply_markup=reply_markup
            )
            return VIEWING_BUILDS
        else:
            return await build_pc(update, context)
            
    elif action == "back_to_categories":
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        return await components_menu(update, context)
        
    elif action == "back_to_components":
        # –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        if user_id in user_states and "component_category_id" in user_states[user_id]:
            category_id = user_states[user_id]["component_category_id"]
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–∑ –ë–î
            components = get_components_by_category(category_id)
            
            keyboard = []
            for component in components:
                keyboard.append([
                    InlineKeyboardButton(
                        f"{component['name']} - {component['price']} —Ä—É–±.", 
                        callback_data=f"component_{component['id']}"
                    )
                ])
            
            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_categories")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:",
                reply_markup=reply_markup
            )
            return VIEWING_COMPONENTS
        else:
            return await components_menu(update, context)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    application = ApplicationBuilder().token(TOKEN).build()
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            SELECTING_MAIN_MENU: [
                CallbackQueryHandler(build_pc, pattern="^build_pc$"),
                CallbackQueryHandler(components_menu, pattern="^components$"),
                CallbackQueryHandler(help_command, pattern="^help$")
            ],
            SELECTING_DEVICE_TYPE: [
                CallbackQueryHandler(select_price_category, pattern="^device_"),
                CallbackQueryHandler(back_handler, pattern="^back_to_main$")
            ],
            SELECTING_PRICE_CATEGORY: [
                CallbackQueryHandler(show_builds, pattern="^price_"),
                CallbackQueryHandler(back_handler, pattern="^back_to_device$")
            ],
            VIEWING_BUILDS: [
                CallbackQueryHandler(next_build, pattern="^next_build_"),
                CallbackQueryHandler(back_handler, pattern="^back_to_price$")
            ],
            SELECTING_COMPONENT_CATEGORY: [
                CallbackQueryHandler(show_components, pattern="^category_"),
                CallbackQueryHandler(back_handler, pattern="^back_to_main$")
            ],
            VIEWING_COMPONENTS: [
                CallbackQueryHandler(show_component_details, pattern="^component_"),
                CallbackQueryHandler(back_handler, pattern="^back_to_categories$")
            ],
            VIEWING_COMPONENT_DETAILS: [
                CallbackQueryHandler(back_handler, pattern="^back_to_components$")
            ]
        },
        fallbacks=[CommandHandler("start", start)]
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application.add_handler(conv_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

    
if __name__ == "__main__":
    main()








